name: Auto Request Review

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  auto_review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get pull request creator username
        id: get_pull_request_creator_username
        run: |
          creator=$(jq -r '.pull_request.user.login' ${{ github.event_path }})
          echo "creator: $creator"
          echo "::set-output name=creator::$creator"

      - name: Get changed files
        id: get_changed_files
        run: |
          base_sha=${{ github.event.pull_request.base.sha }}
          head_sha=${{ github.event.pull_request.head.sha }}
          echo "base_sha: $base_sha"
          echo "head_sha: $head_sha"
          echo ::set-output name=changed_files::$(git diff --name-only $base_sha $head_sha)
          
      - name: Extract reviewers emails from changed files
        id: extract_reviewers_emails
        run: |
          # Get the changed files
          changed_files="${{ steps.get_changed_files.outputs.changed_files }}"
          echo "changed_files: $changed_files"
          
          emails=($(git log --pretty=format:"%ae" -- $changed_files | sort -u))

          # Join the emails array back into a comma-separated string
          emails=$(IFS=','; echo "${emails[*]}")

          echo "emails: $emails"
          echo "::set-output name=emails::$emails"

      - name: Get valid reviewers usernames
        id: get_valid_reviewers
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          emails="${{ steps.extract_reviewers_emails.outputs.emails }}"

          # Create an empty array to store reviewers GitHub usernames
          valid_reviewers=()

          # the creator of the pull request is not a valid reviewer
          # TODO: in the future, we might want to consider users that are no longer part of the organization or collaborators
          creator="${{ steps.get_pull_request_creator_username.outputs.creator }}"
          invalid_reviewers=("GitHub" "dependabot[bot]" "$creator" "dependabot-preview[bot]" null)

          # Loop through the reviewers emails and get their GitHub usernames
          IFS=',' read -ra emails_array <<< "$emails"
          for email in "${emails_array}"; do
            # Get the GitHub username from the email
            username=$(curl -s -X GET \
            -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/search/users?q=$email+in:email" \
            | jq -r '.items[0].login')
            echo "username: $username, email: $email"
            if [[ ! " ${invalid_reviewers[@]} " =~ " $username " ]]; then
              valid_reviewers+=("$username")
            fi
          done

          # Join the reviewers usernames array back into a comma-separated string
          valid_reviewers_string=$(IFS=','; echo "${valid_reviewers[*]}")

          echo "Valid reviewers: $valid_reviewers_string"
          echo "::set-output name=valid_reviewers::$valid_reviewers_string"

      - name: Get valid default reviewers
        id: get_valid_default_reviewers
        env:
          DEFAULT_REVIEWERS: ${{ vars.DEFAULT_REVIEWERS }}
        run: |
          default_reviewers="$DEFAULT_REVIEWERS"
          
          # the creator of the pull request is not a valid reviewer
          creator="${{ steps.get_pull_request_creator_username.outputs.creator }}"
          invalid_reviewers=("GitHub" "dependabot[bot]" "$creator" "dependabot-preview[bot]", null)

          # Create an empty array to store valid default reviewers
          valid_default_reviewers=()

          # Loop through the default reviewers and check if they are valid
          IFS=',' read -ra default_reviewers_array <<< "$default_reviewers"
          for default_reviewer in "${default_reviewers_array[@]}"; do
            # Check if the default reviewer is in the valid reviewers array
            if [[ ! " ${invalid_reviewers[@]} " =~ " $default_reviewer " ]]; then
              valid_default_reviewers+=("$default_reviewer")
            fi
          done

          # Join the valid default reviewers array back into a comma-separated string
          valid_default_reviewers_string=$(IFS=','; echo "${valid_default_reviewers[*]}")

          echo "Valid default reviewers: $valid_default_reviewers_string"

          # Set the output to be used in the next step
          echo "::set-output name=valid_default_reviewers::$valid_default_reviewers_string"

      - name: Request reviews
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          extracted_reviewers="${{ steps.get_valid_reviewers.outputs.valid_reviewers }}"
          default_reviewers="${{ steps.get_valid_default_reviewers.outputs.valid_default_reviewers }}"  

          # If there are no extracted reviewers, use the default reviewers
          if [[ $extracted_reviewers == '' ]]; then
            reviewers=$default_reviewers
          else
            reviewers=$extracted_reviewers
          fi

          # Assign the PR to two random reviewers
          IFS=',' read -ra reviewers_array <<< "$reviewers"
          # Shuffle the reviewers array
          shuffled_reviewers=($(shuf -e "${reviewers_array[@]}"))

          # Get the first two reviewers from the shuffled array
          random_reviewers=("${shuffled_reviewers[@]:0:2}")

          random_reviewers_string=$(IFS=','; echo "${random_reviewers[*]}")

          # Get the first reviewer
          first_reviewer="${random_reviewers[0]}"
          # Get the second reviewer
          if [[ ${#random_reviewers[@]} -eq 1 ]]; then
            # if there is only one reviewer, set the second reviewer to any default reviewer that is not the first reviewer
            IFS=',' read -ra default_reviewers_array <<< "$default_reviewers"
            for default_reviewer in "${default_reviewers_array[@]}"; do
              if [[ $default_reviewer != $first_reviewer ]]; then
                second_reviewer=$default_reviewer
              fi
            done
          else
            second_reviewer="${random_reviewers[1]}"
          fi

          echo "Reviewers: $random_reviewers_string"
          echo "First reviewer: $first_reviewer"
          echo "Second reviewer: $second_reviewer"

          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/requested_reviewers \
            -d '{"reviewers":["'"$first_reviewer"'", "'"$second_reviewer"'"]}'
